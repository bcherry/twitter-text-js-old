<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">

<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>Test twitter-text-js</title>
	<meta name="author" content="eric">
  <link rel="stylesheet" href="http://github.com/jquery/qunit/raw/master/qunit/qunit.css" type="text/css" media="screen" />
  <script type="text/javascript" src="http://github.com/jquery/qunit/raw/master/qunit/qunit.js"></script>
  <script type="text/javascript" src="../lib/twitter-text.js"></script>
	
	<script type="text/javascript" charset="utf-8">
	// <![CDATA[

	module("TwitterText AutoLink");
	function auto_link(text) {
	  return TwitterText.auto_link(text, { 'suppress_no_follow': true });
	}
	var autolink_tests = <%= @autolink_json %>;
	for (var testName in autolink_tests.tests) {
		(function (testName) {
			test("testing autolink " + testName, function () {
				var list = autolink_tests.tests[testName];
				for (var i = 0; i < list.length; i += 1) {
					var obj = list[i];
					equals(auto_link(obj.text), obj.expected, obj.description);
				}
			});
		}(testName));
	}
	
	module("TwitterText Extract");
	var extractFuncs = {
		mentions: function (text) {
			return TwitterText.extract_mentioned_screen_names(text);
		},
		replies: function (text) {
			return TwitterText.extract_reply_screen_name(text);
		},
		urls: function (text) {
			return TwitterText.extract_urls(text);
		},
		hashtags: function (text) {
			return TwitterText.extract_hashtags(text);
		}
	};
	var extract_tests = <%= @extract_json %>;
	for (var testName in extract_tests.tests) {
		(function (testName) {
			test("testing extract " + testName, function () {
				var list = extract_tests.tests[testName];
				for (var i = 0; i < list.length; i += 1) {
					var obj = list[i];
					same(extractFuncs[testName](obj.text), obj.expected, obj.description);
				}
			});
		}(testName));
	}
	
	module("TwitterText Hit Highlighting")
	function hit_highlight(text, hits) {
		return TwitterText.hit_highlight(text, hits);
	}
	var hit_highlighting_tests = <%= @hit_highlighting_json %>;
	for (var testName in hit_highlighting_tests.tests) {
		(function (testName) {
			test("testing hit highlighting " + testName, function () {
				var list = hit_highlighting_tests.tests[testName];
				for (var i = 0; i < list.length; i += 1) {
					var obj = list[i];
					same(hit_highlight(obj.text, obj.hits), obj.expected, obj.description);
				}
			});
		}(testName));
	}
	// ]]>
	</script>
	<!-- Date: 2010-04-23 -->
</head>
<body>
<h1 id="qunit-header">QUnit example</h1>
<h2 id="qunit-banner"></h2>
<h2 id="qunit-userAgent"></h2>
<ol id="qunit-tests"></ol>
</body>
</html>
